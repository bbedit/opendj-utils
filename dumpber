#!/usr/bin/perl -w

use strict;
use warnings;
use Convert::ASN1;

$::VERSION = 0.1;

sub version()
{
	print STDERR "$0 version $::VERSION\n";
	exit 0;
}

sub usage()
{
	print STDERR "Usage: $0 [-base64|-hex] [-h] [-v]\n";
	exit 1;
}


my %opt = (
	'base64' => 0,   # Base64-encoded input
	'hex' => 0,      # Hex-encoded input
	'h' => 0,
	'v' => 0,
);

while (@ARGV) {
	my $arg = shift @ARGV;
	if ($arg =~ m{^-base64$}) {
		$opt{base64} = 1;
		require MIME::Base64;
	} elsif ($arg =~ m{^-hex$}) {
		$opt{hex} = 1;
	} elsif ($arg =~ m{^-h$|^--help$}) {
		$opt{h} = 1;
	} elsif ($arg =~ m{^-v$|^--version$}) {
		$opt{v} = 1;
	} else {
		unshift @ARGV, $arg;
		last;
	}
}

version if $opt{v};
usage if $opt{h};

my $str;
{
	local $/ = undef;
	$str = <>;
}

if ($opt{base64}) {
	$str = MIME::Base64::decode($str);
} elsif ($opt{hex}) {
	$str =~ s/[^0-9a-fA-F]//g;
	$str =~ s/([0-9a-fA-F][0-9a-fA-F])/pack('C',hex $1)/ge;
}

Convert::ASN1::asn_dump(*STDOUT, $str);

exit 0;

__END__

=head1 NAME

dumpber -  dump BER-encoded data as text

=head1 SYNOPSIS

dumpber [-base64|-hex] [-h] [-v]

=head1 DESCRIPTION

Attempt to decode and pretty-print the BER-encoded input. The input can be
base64- or hex-encoded, but the default is raw binary.

=head1 OPTIONS

=over

=item B<-base64> base64-decode the data first.

=item B<-hex> hex-decode the data first.

=item B<-h> display help text.

=item B<-v> display version information.

=back

=head1 EXAMPLE

  $ dumpber /tmp/test.bin
  0000   30: SEQUENCE {
  0002   13:   [UNIVERSAL 23]
  0004     :     31 33 30 36 30 36 30 38 32 30 34 39 5A __ __ __ 130606082049Z
  0011   13:   [UNIVERSAL 23]
  0013     :     31 33 30 39 30 34 30 38 32 30 34 39 5A __ __ __ 130904082049Z
  0020     : }

=head1 AUTHOR

Chris Ridd E<lt>chris.ridd@forgerock.comE<gt>

=head1 COPYRIGHT

Copyright (c) 2013 Chris Ridd. All rights reserved. This tool is free software;
you can redistribute it and/or modify it under the same terms as Perl itself.
